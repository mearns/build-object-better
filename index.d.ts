/* eslint-disable import/export */

/*
   /$$$                      /$$$
  /$$_/        /$$/$$       |_  $$
 /$$/         |  $$$/         \  $$
| $$          /$$$$$$$         | $$
| $$         |__ $$$_/         | $$
|  $$          /$$ $$          /$$/
 \  $$$       |__/__/        /$$$/
  \___/                     |___/
*/

/**
 * Create a new object as a shallow clone of the given object.
 * @param source The object to clone.
 */
export declare function buildObject<V>(source: {
  [key: string]: V | undefined;
}): { [key: string]: V | undefined };

/**
 * Create an object from an iterable of key-value pairs, each
 * pair defining one property in the created object.
 * @param entries The list of key-value pairs.
 */
export declare function buildObject<V>(
  entries: Iterable<[string, V]>
): { [key: string]: V | undefined };

/**
 * Create an object from an iterable of key-value pairs, each
 * pair defining one property in the created object.
 * @param entries The list of key-value pairs.
 */
export declare function buildObject<V>(
  entryObjects: Iterable<{ key: string; value: V }>
): { [key: string]: V | undefined };

/*
   /$$$        /$$$$$$  /$$                                 /$$      /$$$$$$   /$$$$$$   /$$ /$$$$$$$$ /$$                          /$$$
  /$$_/       /$$__  $$| $$                                | $$     /$$__  $$ /$$__  $$ /$$/| $$_____/|  $$           /$$/$$       |_  $$
 /$$/        | $$  \ $$| $$$$$$$  /$$  /$$$$$$   /$$$$$$$ /$$$$$$  | $$  \ $$| $$  \__//$$/ | $$       \  $$         |  $$$/         \  $$
| $$         | $$  | $$| $$__  $$|__/ /$$__  $$ /$$_____/|_  $$_/  | $$  | $$| $$$$   /$$/  | $$$$$     \  $$        /$$$$$$$         | $$
| $$         | $$  | $$| $$  \ $$ /$$| $$$$$$$$| $$        | $$    | $$  | $$| $$_/  |  $$  | $$__/      /$$/       |__ $$$_/         | $$
|  $$        | $$  | $$| $$  | $$| $$| $$_____/| $$        | $$ /$$| $$  | $$| $$     \  $$ | $$        /$$/          /$$ $$          /$$/
 \  $$$      |  $$$$$$/| $$$$$$$/| $$|  $$$$$$$|  $$$$$$$  |  $$$$/|  $$$$$$/| $$      \  $$| $$$$$$$$ /$$//$$       |__/__/        /$$$/
  \___/       \______/ |_______/ | $$ \_______/ \_______/   \___/   \______/ |__/       \__/|________/|__/| $/                     |___/
                            /$$  | $$                                                                     |_/
                           |  $$$$$$/
                            \______/
*/

/**
 * Create an object by transforming the property values of a source
 * object. The returned object has all the same property names as the `source`
 * object, but with (possibly) different values, as generated by the given
 * `valueFunc`.
 *
 * The `valueFunc` is invoked with each "key" (a property name
 * from the `source` object), the index of the property (based on iteration
 * order of the `source` object's properties), a list of _all_ the keys,
 * the corresponding "element" (property value) from the `source`, and a
 * list of _all_ the element values.
 *
 * Note that only the enumerable properties of the source object are
 * used.
 *
 * ```javascript
 * > buildObject(
 *  {a: "foo", b: "bar" },
 *  (k, i, ks, e) => `${k}-${e}`
 * )
 * { a: "a-foo", b: "b-bar" }
 * ```
 *
 * @param source The source object.
 * @param valueFunc A function that generates property values for the output
 * object.
 */
export declare function buildObject<E, V>(
  source: {
    [key: string]: E | undefined;
  },
  valueFunc: (
    key: string,
    index?: number,
    keys?: Iterable<string>,
    element?: E,
    elements?: Iterable<E>
  ) => V
): { [key: string]: V | undefined };

/**
 * Create an object by replacing the property values of a source
 * object with corresponding values from an array of values. The
 * returned object has all the same property names as the `source`
 * object, but with (possibly) different values, as provided by
 * the `values` array.
 *
 * The enumerable properties of the source object are iterated over
 * and paired with corresponding values from `values`; the property
 * values of the source object are ignored.
 *
 * ```javascript
 * > buildObject(
 *  {a: "foo", b: "bar" },
 *  ["one", "two", "ignored"]
 * )
 * { a: "one", b: "two" }
 * ```
 *
 * @param source The source object.
 * @param values The array of property values.
 */
export declare function buildObject<E, V>(
  source: {
    [key: string]: E | undefined;
  },
  values: V[]
): { [key: string]: V | undefined };

/**
 * Create an object by replacing the property values of a source
 * object with corresponding values from another object.
 *
 * Note that only the enumerable properties of the source object are
 * used; the property values of the source object are ignored.
 *
 * ```javascript
 * > buildObject(
 *  {b: 1, d: 2},
 *  {e: 10, d: 20, c: 30, b: 40, a: 50 }
 * )
 * { b: 40, d: 20 }
 * ```
 *
 * @param source The source object.
 * @param valueSource The object from which property values are taken.
 */
export declare function buildObject<E, V>(
  source: {
    [key: string]: E | undefined;
  },
  valueSource: {
    [key: string]: V | undefined;
  }
): { [key: string]: V | undefined };

/**
 * Create an object by replacing the property value of every property
 * in a source object with the given fixed value.
 *
 * Note that only the enumerable properties of the source object are
 * used; the property values of the source object are ignored. This
 * only works for primitive typed values.
 *
 * ```javascript
 * > buildObject(
 *  {b: 1, d: 2},
 *  "the one and only"
 * )
 * { b: "the ony and only", d: "the one and only" }
 * ```
 *
 * @param source The source object.
 * @param fixedVal The value to use for every property.
 */
export declare function buildObject<E, V extends Primitive>(
  source: {
    [key: string]: E | undefined;
  },
  fixedVal: V
): { [key: string]: V | undefined };

/*

   /$$$       /$$$$$$ /$$                                  /$$       /$$              /$$ /$$$$$$$$ /$$                          /$$$
  /$$_/      |_  $$_/| $$                                 | $$      | $$             /$$/| $$_____/|  $$           /$$/$$       |_  $$
 /$$/          | $$ /$$$$$$    /$$$$$$   /$$$$$$  /$$$$$$ | $$$$$$$ | $$  /$$$$$$   /$$/ | $$       \  $$         |  $$$/         \  $$
| $$           | $$|_  $$_/   /$$__  $$ /$$__  $$|____  $$| $$__  $$| $$ /$$__  $$ /$$/  | $$$$$     \  $$        /$$$$$$$         | $$
| $$           | $$  | $$    | $$$$$$$$| $$  \__/ /$$$$$$$| $$  \ $$| $$| $$$$$$$$|  $$  | $$__/      /$$/       |__ $$$_/         | $$
|  $$          | $$  | $$ /$$| $$_____/| $$      /$$__  $$| $$  | $$| $$| $$_____/ \  $$ | $$        /$$/          /$$ $$          /$$/
 \  $$$       /$$$$$$|  $$$$/|  $$$$$$$| $$     |  $$$$$$$| $$$$$$$/| $$|  $$$$$$$  \  $$| $$$$$$$$ /$$//$$       |__/__/        /$$$/
  \___/      |______/ \___/   \_______/|__/      \_______/|_______/ |__/ \_______/   \__/|________/|__/| $/                     |___/
                                                                                                       |_/
*/

/**
 * Creates an object from a list (or other iterable) of "keys" (property values)
 * and a function which generates the property values.
 *
 * The `valueFunc` is invoked with each "key" (a property name
 * from the `source` object), the index of the property (based on iteration
 * order of the `source` object's properties), a list of _all_ the keys,
 * the corresponding "element" (property value) from the `source`, and a
 * list of _all_ the element values. In this case, the keys and the elements
 * are identical.
 *
 * Note that only the enumerable properties of the source object are
 * used.
 *
 * ```javascript
 * > buildObject(
 *  ["a", "b"],
 *  (k, i, ks, e) => `${k}-${e}`
 * )
 * { a: "a-a", b: "b-b" }
 * ```
 *
 * @param keys The iterable of keys (property names).
 * @param valueFunc A function that generates property values for the output
 * object.
 */
export declare function buildObject<E extends string, V>(
  keys: Iterable<E>,
  valueFunc: (
    key: string,
    index?: number,
    keys?: Iterable<string>,
    element?: E,
    elements?: Iterable<E>
  ) => V
): { [key: string]: V | undefined };

/**
 * Creates an object from a list (or other iterable) of "keys" (property values)
 * and a function which generates the property values.
 *
 * The `valueFunc` is invoked with each "key" (a property name
 * from the `source` object), the index of the property (based on iteration
 * order of the `source` object's properties), a list of _all_ the keys,
 * the corresponding "element" (property value) from the `source`, and a
 * list of _all_ the element values. In this case, the keys and the elements
 * are identical.
 *
 * Note that only the enumerable properties of the source object are
 * used.
 *
 * ```javascript
 * > buildObject(
 *  ["a", "b"],
 *  (k, i, ks, e) => `${k}-${e}`
 * )
 * { a: "a-a", b: "b-b" }
 * ```
 *
 * @param keys The iterable of keys (property names).
 * @param valueFunc A function that generates property values for the output
 * object.
 */
export declare function buildObject<E extends string, V>(
  keys: Iterable<E>,
  valueFunc: (
    key: string,
    index?: number,
    keys?: Iterable<string>,
    element?: E,
    elements?: Iterable<E>
  ) => V
): { [key: string]: V | undefined };

/**
 * Create an object by pairing corresponding elements from a list
 * of keys (property names) and a list of values. Any iterable can
 * be used in place of a list for the keys, but only an array can be
 * used for the values.
 *
 * ```javascript
 * > buildObject(
 *  ["a", "b"],
 *  ["one", "two", "ignored"]
 * )
 * { a: "one", b: "two" }
 * ```
 *
 * @param keys The keys (property names).
 * @param values The array of property values.
 */
export declare function buildObject<E extends string, V>(
  keys: Iterable<E>,
  values: V[]
): { [key: string]: V | undefined };

/**
 * Create an object by copying the specified properties from the
 * given object.
 *
 * ```javascript
 * > buildObject(
 *  ["b", "d"],
 *  {e: 10, d: 20, c: 30, b: 40, a: 50 }
 * )
 * { b: 40, d: 20 }
 * ```
 *
 * @param keys The keys (property names).
 * @param valueSource The object from which property values are taken.
 */
export declare function buildObject<E, V>(
  keys: Iterable<E>,
  valueSource: {
    [key: string]: V | undefined;
  }
): { [key: string]: V | undefined };

/**
 * Create an object with the named properties, all of whom share the
 * same primitive value.
 *
 * ```javascript
 * > buildObject(
 *  ["b", "d"],
 *  "the one and only"
 * )
 * { b: "the ony and only", d: "the one and only" }
 * ```
 * Note this only works for primitive typed values.
 *
 * @param keys The keys (property names).
 * @param fixedVal The value to use for every property.
 */
export declare function buildObject<E, V extends Primitive>(
  keys: Iterable<E>,
  fixedVal: V
): { [key: string]: V | undefined };

/*
   /$$$ /$$$$$$ /$$                                  /$$       /$$              /$$ /$$$$$$$$ /$$           /$$   /$$                     /$$$$$$$$                                              /$$$
  /$$_/|_  $$_/| $$                                 | $$      | $$             /$$/| $$_____/|  $$         | $$  /$$/                    | $$_____/                                       /$$/$$|_  $$
 /$$/    | $$ /$$$$$$    /$$$$$$   /$$$$$$  /$$$$$$ | $$$$$$$ | $$  /$$$$$$   /$$/ | $$       \  $$        | $$ /$$/   /$$$$$$  /$$   /$$| $$    /$$   /$$ /$$$$$$$   /$$$$$$$           |  $$$/  \  $$
| $$     | $$|_  $$_/   /$$__  $$ /$$__  $$|____  $$| $$__  $$| $$ /$$__  $$ /$$/  | $$$$$     \  $$       | $$$$$/   /$$__  $$| $$  | $$| $$$$$| $$  | $$| $$__  $$ /$$_____/           /$$$$$$$  | $$
| $$     | $$  | $$    | $$$$$$$$| $$  \__/ /$$$$$$$| $$  \ $$| $$| $$$$$$$$|  $$  | $$__/      /$$/       | $$  $$  | $$$$$$$$| $$  | $$| $$__/| $$  | $$| $$  \ $$| $$                |__ $$$_/  | $$
|  $$    | $$  | $$ /$$| $$_____/| $$      /$$__  $$| $$  | $$| $$| $$_____/ \  $$ | $$        /$$/        | $$\  $$ | $$_____/| $$  | $$| $$   | $$  | $$| $$  | $$| $$                  /$$ $$   /$$/
 \  $$$ /$$$$$$|  $$$$/|  $$$$$$$| $$     |  $$$$$$$| $$$$$$$/| $$|  $$$$$$$  \  $$| $$$$$$$$ /$$//$$      | $$ \  $$|  $$$$$$$|  $$$$$$$| $$   |  $$$$$$/| $$  | $$|  $$$$$$$ /$$       |__/__/ /$$$/
  \___/|______/ \___/   \_______/|__/      \_______/|_______/ |__/ \_______/   \__/|________/|__/| $/      |__/  \__/ \_______/ \____  $$|__/    \______/ |__/  |__/ \_______/| $/              |___/
                                                                                                 |_/                            /$$  | $$                                     |_/
                                                                                                                               |  $$$$$$/
                                                                                                                                \______/
*/

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are determined for each element from the given `keyFunc`,
 * and property values are determined from the given `valueFunc`.
 *
 * The `keyFunc` is invoked with each element and it's index within `elements`, plus
 * a full list of all the elements, and the `valueFunc` is invoked with each key (property
 * name) produced by the `keyFunc`, the index, the set of all produced keys, plus the
 * corresponding elements and the set of all elements.
 *
 * ```javascript
 * > buildObject(
 *  ["b", "d"],
 *  e => e.toUpperCase(),
 *  (k, i, ks, e) => `${k}-${e}`
 * )
 * { B: "B-b", D: "D-d" }
 * ```
 *
 * @param elements The elements from which the properties are derived.
 * @param keyFunc The function that caluclates property names from elements.
 * @param valueFunc The function that calculates property values from keys and/or elements.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keyFunc: (element: E, idx?: number, elements?: Iterable<E>) => string,
  valueFunc: (
    key: string,
    idx?: number,
    keys?: Iterable<string>,
    element?: E,
    elements?: Iterable<E>
  ) => V
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are determined for each element from the given `keyFunc`,
 * and property values are taken from the corresponding index in the provided array.
 *
 * The `keyFunc` is invoked with each element and it's index within `elements`, plus
 * a full list of all the elements.
 *
 * ```javascript
 * > buildObject(
 *  ["b", "d"],
 *  e => e.toUpperCase(),
 *  (k, i, ks, e) => `${k}-${e}`
 * )
 * { B: "B-b", D: "D-d" }
 * ```
 *
 * @param elements The elements from which the properties are derived.
 * @param keyFunc The function that caluclates property names from elements.
 * @param values The property values.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keyFunc: (element: E, idx?: number, elements?: Iterable<E>) => string,
  values: V[]
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are determined for each element from the given `keyFunc`,
 * and property values are taken from the corresponding properties of the given
 * `valueSource` object (the property named by the produced key).
 *
 * The `keyFunc` is invoked with each element and it's index within `elements`, plus
 * a full list of all the elements.
 *
 * @param elements The elements from which the properties are derived.
 * @param keyFunc The function that caluclates property names from elements.
 * @param valueSource The object that provides the property values.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keyFunc: (element: E, idx?: number, elements?: Iterable<E>) => string,
  valueSource: { [key: string]: V | undefined }
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each, using the same `fixedValue` for each property. Property names ("keys") are
 * determined for each element from the given `keyFunc`.
 *
 * The `keyFunc` is invoked with each element and it's index within `elements`, plus
 * a full list of all the elements.
 *
 * @param elements The elements from which the properties are derived.
 * @param keyFunc The function that caluclates property names from elements.
 * @param fixedValue The value to use for all properties.
 */
export declare function buildObject<E, V extends Primitive>(
  elements: Iterable<E>,
  keyFunc: (element: E, idx?: number, elements?: Iterable<E>) => string,
  fixedValue: V
): { [key: string]: V | undefined };

/*
   /$$$ /$$$$$$ /$$                                  /$$       /$$              /$$ /$$$$$$$$ /$$                       /$$               /$$                     /$$$$ /$$$$                   /$$$
  /$$_/|_  $$_/| $$                                 | $$      | $$             /$$/| $$_____/|  $$                     | $$              |__/                    | $$_/|_  $$            /$$/$$|_  $$
 /$$/    | $$ /$$$$$$    /$$$$$$   /$$$$$$  /$$$$$$ | $$$$$$$ | $$  /$$$$$$   /$$/ | $$       \  $$          /$$$$$$$ /$$$$$$    /$$$$$$  /$$ /$$$$$$$   /$$$$$$ | $$    | $$           |  $$$/  \  $$
| $$     | $$|_  $$_/   /$$__  $$ /$$__  $$|____  $$| $$__  $$| $$ /$$__  $$ /$$/  | $$$$$     \  $$        /$$_____/|_  $$_/   /$$__  $$| $$| $$__  $$ /$$__  $$| $$    | $$           /$$$$$$$  | $$
| $$     | $$  | $$    | $$$$$$$$| $$  \__/ /$$$$$$$| $$  \ $$| $$| $$$$$$$$|  $$  | $$__/      /$$/       |  $$$$$$   | $$    | $$  \__/| $$| $$  \ $$| $$  \ $$| $$    | $$          |__ $$$_/  | $$
|  $$    | $$  | $$ /$$| $$_____/| $$      /$$__  $$| $$  | $$| $$| $$_____/ \  $$ | $$        /$$/         \____  $$  | $$ /$$| $$      | $$| $$  | $$| $$  | $$| $$    | $$            /$$ $$   /$$/
 \  $$$ /$$$$$$|  $$$$/|  $$$$$$$| $$     |  $$$$$$$| $$$$$$$/| $$|  $$$$$$$  \  $$| $$$$$$$$ /$$//$$       /$$$$$$$/  |  $$$$/| $$      | $$| $$  | $$|  $$$$$$$| $$$$ /$$$$ /$$       |__/__/ /$$$/
  \___/|______/ \___/   \_______/|__/      \_______/|_______/ |__/ \_______/   \__/|________/|__/| $/      |_______/    \___/  |__/      |__/|__/  |__/ \____  $$|____/|____/| $/              |___/
                                                                                                 |_/                                                    /$$  \ $$            |_/
                                                                                                                                                       |  $$$$$$/
                                                                                                                                                        \______/
*/

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are taken from the corresponding index of the provided
 * `keys` array, and property values are determined from the given `valueFunc`.
 *
 * The `valueFunc` is invoked with each key (property
 * name) produced by the `keyFunc`, the index, the set of all produced keys, plus the
 * corresponding elements and the set of all elements.
 *
 * @param elements The elements from which the properties are derived.
 * @param keys The array of keys.
 * @param valueFunc The function that calculates property values from keys and/or elements.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keys: string[],
  valueFunc: (
    key: string,
    idx?: number,
    keys?: Iterable<string>,
    element?: E,
    elements?: Iterable<E>
  ) => V
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are taken from the corresponding index of the provided
 * `keys` array, and property values are taken from the corresponding index in the
 * provided `values` array.
 *
 * @param elements The elements from which the properties are derived.
 * @param keys The array of keys.
 * @param values The property values.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keys: string[],
  values: V[]
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are taken from the corresponding index of the provided
 * `keys` array, and property values are taken from the corresponding properties of the given
 * `valueSource` object (the property named by the key).
 *
 * @param elements The elements from which the properties are derived.
 * @param keys The array of keys.
 * @param valueSource The object that provides the property values.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keys: string[],
  valueSource: { [key: string]: V | undefined }
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each, using the same `fixedValue` for each property. Property names ("keys") are taken
 * from the corresponding index of the provided `keys` array.
 *
 * @param elements The elements from which the properties are derived.
 * @param keys The array of keys.
 * @param fixedValue The value to use for all properties.
 */
export declare function buildObject<E, V extends Primitive>(
  elements: Iterable<E>,
  keys: string[],
  fixedValue: V
): { [key: string]: V | undefined };

/*
   /$$$ /$$$$$$ /$$                                  /$$       /$$              /$$             /$$               /$$                     /$$            /$$$$$$  /$$                                 /$$      /$$$$$$   /$$$$$$   /$$             /$$               /$$                     /$$                   /$$$
  /$$_/|_  $$_/| $$                                 | $$      | $$             /$$/            | $$              |__/                    |  $$          /$$__  $$| $$                                | $$     /$$__  $$ /$$__  $$ /$$/            | $$              |__/                    |  $$           /$$/$$|_  $$
 /$$/    | $$ /$$$$$$    /$$$$$$   /$$$$$$  /$$$$$$ | $$$$$$$ | $$  /$$$$$$   /$$/   /$$$$$$$ /$$$$$$    /$$$$$$  /$$ /$$$$$$$   /$$$$$$  \  $$        | $$  \ $$| $$$$$$$  /$$  /$$$$$$   /$$$$$$$ /$$$$$$  | $$  \ $$| $$  \__//$$/   /$$$$$$$ /$$$$$$    /$$$$$$  /$$ /$$$$$$$   /$$$$$$  \  $$         |  $$$/  \  $$
| $$     | $$|_  $$_/   /$$__  $$ /$$__  $$|____  $$| $$__  $$| $$ /$$__  $$ /$$/   /$$_____/|_  $$_/   /$$__  $$| $$| $$__  $$ /$$__  $$  \  $$       | $$  | $$| $$__  $$|__/ /$$__  $$ /$$_____/|_  $$_/  | $$  | $$| $$$$   /$$/   /$$_____/|_  $$_/   /$$__  $$| $$| $$__  $$ /$$__  $$  \  $$        /$$$$$$$  | $$
| $$     | $$  | $$    | $$$$$$$$| $$  \__/ /$$$$$$$| $$  \ $$| $$| $$$$$$$$|  $$  |  $$$$$$   | $$    | $$  \__/| $$| $$  \ $$| $$  \ $$   /$$/       | $$  | $$| $$  \ $$ /$$| $$$$$$$$| $$        | $$    | $$  | $$| $$_/  |  $$  |  $$$$$$   | $$    | $$  \__/| $$| $$  \ $$| $$  \ $$   /$$/       |__ $$$_/  | $$
|  $$    | $$  | $$ /$$| $$_____/| $$      /$$__  $$| $$  | $$| $$| $$_____/ \  $$  \____  $$  | $$ /$$| $$      | $$| $$  | $$| $$  | $$  /$$/        | $$  | $$| $$  | $$| $$| $$_____/| $$        | $$ /$$| $$  | $$| $$     \  $$  \____  $$  | $$ /$$| $$      | $$| $$  | $$| $$  | $$  /$$/          /$$ $$   /$$/
 \  $$$ /$$$$$$|  $$$$/|  $$$$$$$| $$     |  $$$$$$$| $$$$$$$/| $$|  $$$$$$$  \  $$ /$$$$$$$/  |  $$$$/| $$      | $$| $$  | $$|  $$$$$$$ /$$//$$      |  $$$$$$/| $$$$$$$/| $$|  $$$$$$$|  $$$$$$$  |  $$$$/|  $$$$$$/| $$      \  $$ /$$$$$$$/  |  $$$$/| $$      | $$| $$  | $$|  $$$$$$$ /$$//$$       |__/__/ /$$$/
  \___/|______/ \___/   \_______/|__/      \_______/|_______/ |__/ \_______/   \__/|_______/    \___/  |__/      |__/|__/  |__/ \____  $$|__/| $/       \______/ |_______/ | $$ \_______/ \_______/   \___/   \______/ |__/       \__/|_______/    \___/  |__/      |__/|__/  |__/ \____  $$|__/| $/              |___/
                                                                                                                                /$$  \ $$    |_/                      /$$  | $$                                                                                                    /$$  \ $$    |_/
                                                                                                                               |  $$$$$$/                            |  $$$$$$/                                                                                                   |  $$$$$$/
                                                                                                                                \______/                              \______/                                                                                                     \______/
*/

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are taken from the corresponding property of the provided
 * `keySource` object, and property values are determined from the given `valueFunc`.
 *
 * The `valueFunc` is invoked with each key (property
 * name) produced by the `keyFunc`, the index, the set of all produced keys, plus the
 * corresponding elements and the set of all elements.
 *
 * @param elements The elements from which the properties are derived.
 * @param keysSource An object with properties named by `elements`, whose values become the keys.
 * @param valueFunc The function that calculates property values from keys and/or elements.
 */
export declare function buildObject<E extends string, V>(
  elements: Iterable<E>,
  keySource: { [key: string]: string | undefined },
  valueFunc: (
    key: string,
    idx?: number,
    keys?: Iterable<string>,
    element?: E,
    elements?: Iterable<E>
  ) => V
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are taken from the corresponding property of the provided
 * `keySource` object, and property values are taken from the corresponding index in the
 * provided `values` array.
 *
 * @param elements The elements from which the properties are derived.
 * @param keysSource An object with properties named by `elements`, whose values become the keys.
 * @param values The property values.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keySource: { [key: string]: string | undefined },
  values: V[]
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each. Property names ("keys") are taken from the corresponding property of the provided
 * `keySource` object, and property values are taken from the corresponding properties of the given
 * `valueSource` object (the property named by the key).
 *
 * @param elements The elements from which the properties are derived.
 * @param keysSource An object with properties named by `elements`, whose values become the keys.
 * @param valueSource The object that provides the property values.
 */
export declare function buildObject<E, V>(
  elements: Iterable<E>,
  keySource: { [key: string]: string | undefined },
  valueSource: { [key: string]: V | undefined }
): { [key: string]: V | undefined };

/**
 * Create an object by iterating over a set of elements and defining one property for
 * each, using the same `fixedValue` for each property. Property names ("keys") are taken
 * from the corresponding property of the provided `keySource` object, and property values
 * are taken from the corresponding properties of the given
 *
 * @param elements The elements from which the properties are derived.
 * @param keysSource An object with properties named by `elements`, whose values become the keys.
 * @param fixedValue The value to use for all properties.
 */
export declare function buildObject<E, V extends Primitive>(
  elements: Iterable<E>,
  keySource: { [key: string]: string | undefined },
  fixedValue: V
): { [key: string]: V | undefined };

/*
 /$$$$$$$$ /$$     /$$ /$$$$$$$  /$$$$$$$$  /$$$$$$
|__  $$__/|  $$   /$$/| $$__  $$| $$_____/ /$$__  $$
   | $$    \  $$ /$$/ | $$  \ $$| $$      | $$  \__/
   | $$     \  $$$$/  | $$$$$$$/| $$$$$   |  $$$$$$
   | $$      \  $$/   | $$____/ | $$__/    \____  $$
   | $$       | $$    | $$      | $$       /$$  \ $$
   | $$       | $$    | $$      | $$$$$$$$|  $$$$$$/
   |__/       |__/    |__/      |________/ \______/
 */

export type Primitive =
  | string
  | number
  | boolean
  | bigint
  | symbol
  | undefined
  | null;
